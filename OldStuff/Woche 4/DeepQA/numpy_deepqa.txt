matrix.T
Returns the transpose of the matrix.
===
matrix.H
Returns the (complex) conjugate transpose of self.
===
matrix.I
Returns the (multiplicative) inverse of invertible self.
===
matrix.A
Return self as an ndarray object.
===
matrix
Returns a matrix from an array-like object, or from a string of data.
===
asmatrix(data[, dtype])
Interpret the input as a matrix.
===
bmat(obj[, ldict, gdict])
Build a matrix object from a string, nested sequence, or array.
===
memmap
Create a memory-map to an array stored in a binary file on disk.
===
memmap.flush()
Write any changes in the array to the file on disk.
===
chararray
Provides a convenient view on arrays of string and unicode values.
===
core.defchararray.array(obj[, itemsize, ...])
Create a chararray.
===
recarray
Construct an ndarray that allows field access using attributes.
===
record
A data-type scalar that allows field access as attribute lookup.
===
numpy.lib.user_array.container(data[, ...])
Standard container-class for easy multiple-inheritance.
===
ndarray.flat
A 1-D iterator over the array.
===
ndenumerate(arr)
Multidimensional index iterator.
===
broadcast
Produce an object that mimics broadcasting.
===
dtype
Create a data type object.
===
number, inexact, floating
float
===
complexfloating
cfloat
===
integer, signedinteger
int_
===
unsignedinteger
uint
===
character
string
===
generic, flexible
void
===
int
int_
===
bool
bool_
===
float
float_
===
complex
cfloat
===
str
string
===
unicode
unicode_
===
buffer
void
===
(all others)
object_
===
'b'
boolean
===
'i'
(signed) integer
===
'u'
unsigned integer
===
'f'
floating-point
===
'c'
complex-floating point
===
'm'
timedelta
===
'M'
datetime
===
'O'
(Python) objects
===
'S', 'a'
(byte-)string
===
'U'
Unicode
===
'V'
raw data (void)
===
dtype.type
The type object used to instantiate a scalar of this data-type.
===
dtype.kind
A character code (one of ‘biufcmMOSUV) identifying the general kind of data.
===
dtype.char
A unique character code for each of the 21 different built-in types.
===
dtype.num
A unique number for each of the 21 different built-in types.
===
dtype.str
The array-protocol typestring of this data-type object.
===
dtype.name
A bit-width name for this data-type.
===
dtype.itemsize
The element size of this data-type object.
===
dtype.byteorder
A character indicating the byte-order of this data-type object.
===
dtype.fields
Dictionary of named fields defined for this data type, or None.
===
dtype.names
Ordered list of field names, or None if there are no fields.
===
dtype.subdtype
Tuple (item_dtype, shape) if this dtype describes a sub-array, and None otherwise.
===
dtype.shape
Shape tuple of the sub-array if this data type describes a sub-array, and () otherwise.
===
dtype.hasobject
Boolean indicating whether this dtype contains any reference-counted objects in any fields or sub-dtypes.
===
dtype.flags
Bit-flags describing how this data type is to be interpreted.
===
dtype.isbuiltin
Integer indicating how this dtype relates to the built-in dtypes.
===
dtype.isnative
Boolean indicating whether the byte order of this dtype is native to the platform.
===
dtype.descr
PEP3118 interface description of the data-type.
===
dtype.alignment
The required alignment (bytes) of this data-type according to the compiler.
===
dtype.newbyteorder([new_order])
Return a new dtype with a different byte order.
===
ndarray
An array object represents a multidimensional, homogeneous array of fixed-size items.
===
ndarray.flags
Information about the memory layout of the array.
===
ndarray.shape
Tuple of array dimensions.
===
ndarray.strides
Tuple of bytes to step in each dimension when traversing an array.
===
ndarray.ndim
Number of array dimensions.
===
ndarray.data
Python buffer object pointing to the start of the arrays data.
===
ndarray.size
Number of elements in the array.
===
ndarray.itemsize
Length of one array element in bytes.
===
ndarray.nbytes
Total bytes consumed by the elements of the array.
===
ndarray.base
Base object if memory is from some other object.
===
ndarray.dtype
Data-type of the arrays elements.
===
ndarray.T
Same as self.transpose(), except that self is returned if self.ndim < 2.
===
ndarray.real
The real part of the array.
===
ndarray.imag
The imaginary part of the array.
===
ndarray.flat
A 1-D iterator over the array.
===
ndarray.ctypes
An object to simplify the interaction of the array with the ctypes module.
===
__array_interface__
Python-side of the array interface
===
__array_struct__
C-side of the array interface
===
ndarray.ctypes
An object to simplify the interaction of the array with the ctypes module.
===
ndarray.item(*args)
Copy an element of an array to a standard Python scalar and return it.
===
ndarray.tolist()
Return the array as a (possibly nested) list.
===
ndarray.itemset(*args)
Insert scalar into an array (scalar is cast to arrays dtype, if possible)
===
ndarray.tostring([order])
Construct Python bytes containing the raw data bytes in the array.
===
ndarray.tobytes([order])
Construct Python bytes containing the raw data bytes in the array.
===
ndarray.tofile(fid[, sep, format])
Write array to a file as text or binary (default).
===
ndarray.dump(file)
Dump a pickle of the array to the specified file.
===
ndarray.dumps()
Returns the pickle of the array as a string.
===
ndarray.astype(dtype[, order, casting, ...])
Copy of the array, cast to a specified type.
===
ndarray.byteswap(inplace)
Swap the bytes of the array elements
===
ndarray.copy([order])
Return a copy of the array.
===
ndarray.view([dtype, type])
New view of array with the same data.
===
ndarray.getfield(dtype[, offset])
Returns a field of the given array as a certain type.
===
ndarray.setflags([write, align, uic])
Set array flags WRITEABLE, ALIGNED, and UPDATEIFCOPY, respectively.
===
ndarray.fill(value)
Fill the array with a scalar value.
===
ndarray.reshape(shape[, order])
Returns an array containing the same data with a new shape.
===
ndarray.resize(new_shape[, refcheck])
Change shape and size of array in-place.
===
ndarray.transpose(*axes)
Returns a view of the array with axes transposed.
===
ndarray.swapaxes(axis1, axis2)
Return a view of the array with axis1 and axis2 interchanged.
===
ndarray.flatten([order])
Return a copy of the array collapsed into one dimension.
===
ndarray.ravel([order])
Return a flattened array.
===
ndarray.squeeze([axis])
Remove single-dimensional entries from the shape of a.
===
ndarray.take(indices[, axis, out, mode])
Return an array formed from the elements of a at the given indices.
===
ndarray.put(indices, values[, mode])
Set a.flat[n] = values[n] for all n in indices.
===
ndarray.repeat(repeats[, axis])
Repeat elements of an array.
===
ndarray.choose(choices[, out, mode])
Use an index array to construct a new array from a set of choices.
===
ndarray.sort([axis, kind, order])
Sort an array, in-place.
===
ndarray.argsort([axis, kind, order])
Returns the indices that would sort this array.
===
ndarray.partition(kth[, axis, kind, order])
Rearranges the elements in the array in such a way that value of the element in kth position is in the position it would be in a sorted array.
===
ndarray.argpartition(kth[, axis, kind, order])
Returns the indices that would partition this array.
===
ndarray.searchsorted(v[, side, sorter])
Find indices where elements of v should be inserted in a to maintain order.
===
ndarray.nonzero()
Return the indices of the elements that are non-zero.
===
ndarray.compress(condition[, axis, out])
Return selected slices of this array along given axis.
===
ndarray.diagonal([offset, axis1, axis2])
Return specified diagonals.
===
ndarray.argmax([axis, out])
Return indices of the maximum values along the given axis.
===
ndarray.min([axis, out, keepdims])
Return the minimum along a given axis.
===
ndarray.argmin([axis, out])
Return indices of the minimum values along the given axis of a.
===
ndarray.ptp([axis, out])
Peak to peak (maximum - minimum) value along a given axis.
===
ndarray.clip([min, max, out])
Return an array whose values are limited to [min, max].
===
ndarray.conj()
Complex-conjugate all elements.
===
ndarray.round([decimals, out])
Return a with each element rounded to the given number of decimals.
===
ndarray.trace([offset, axis1, axis2, dtype, out])
Return the sum along diagonals of the array.
===
ndarray.sum([axis, dtype, out, keepdims])
Return the sum of the array elements over the given axis.
===
ndarray.cumsum([axis, dtype, out])
Return the cumulative sum of the elements along the given axis.
===
ndarray.mean([axis, dtype, out, keepdims])
Returns the average of the array elements along given axis.
===
ndarray.var([axis, dtype, out, ddof, keepdims])
Returns the variance of the array elements, along given axis.
===
ndarray.std([axis, dtype, out, ddof, keepdims])
Returns the standard deviation of the array elements along given axis.
===
ndarray.prod([axis, dtype, out, keepdims])
Return the product of the array elements over the given axis
===
ndarray.cumprod([axis, dtype, out])
Return the cumulative product of the elements along the given axis.
===
ndarray.all([axis, out, keepdims])
Returns True if all elements evaluate to True.
===
ndarray.any([axis, out, keepdims])
Returns True if any of the elements of a evaluate to True.
===
ndarray.__lt__
x.__lt__(y) <==> x<y
===
ndarray.__le__
x.__le__(y) <==> x<=y
===
ndarray.__gt__
x.__gt__(y) <==> x>y
===
ndarray.__ge__
x.__ge__(y) <==> x>=y
===
ndarray.__eq__
x.__eq__(y) <==> x==y
===
ndarray.__ne__
x.__ne__(y) <==> x!=y
===
ndarray.__nonzero__
x.__nonzero__() <==> x != 0
===
ndarray.__neg__
x.__neg__() <==> -x
===
ndarray.__pos__
x.__pos__() <==> +x
===
ndarray.__invert__
x.__invert__() <==> ~x
===
ndarray.__add__
x.__add__(y) <==> x+y
===
ndarray.__sub__
x.__sub__(y) <==> x-y
===
ndarray.__mul__
x.__mul__(y) <==> x*y
===
ndarray.__div__
x.__div__(y) <==> x/y
===
ndarray.__truediv__
x.__truediv__(y) <==> x/y
===
ndarray.__floordiv__
x.__floordiv__(y) <==> x//y
===
ndarray.__mod__
x.__mod__(y) <==> x%y
===
ndarray.__lshift__
x.__lshift__(y) <==> x<<y
===
ndarray.__rshift__
x.__rshift__(y) <==> x>>y
===
ndarray.__and__
x.__and__(y) <==> x&y
===
ndarray.__or__
x.__or__(y) <==> x|y
===
ndarray.__xor__
x.__xor__(y) <==> x^y
===
ndarray.__iadd__
x.__iadd__(y) <==> x+=y
===
ndarray.__isub__
x.__isub__(y) <==> x-=y
===
ndarray.__imul__
x.__imul__(y) <==> x*=y
===
ndarray.__idiv__
x.__idiv__(y) <==> x/=y
===
ndarray.__itruediv__
x.__itruediv__(y) <==> x/y
===
ndarray.__ifloordiv__
x.__ifloordiv__(y) <==> x//y
===
ndarray.__imod__
x.__imod__(y) <==> x%=y
===
ndarray.__ipow__
x.__ipow__(y) <==> x**=y
===
ndarray.__ilshift__
x.__ilshift__(y) <==> x<<=y
===
ndarray.__irshift__
x.__irshift__(y) <==> x>>=y
===
ndarray.__iand__
x.__iand__(y) <==> x&=y
===
ndarray.__ior__
x.__ior__(y) <==> x|=y
===
ndarray.__ixor__
x.__ixor__(y) <==> x^=y
===
ndarray.__copy__([order])
Return a copy of the array.
===
ndarray.__deepcopy__(() -> Deep copy of array.)
Used if copy.deepcopy is called on an array.
===
ndarray.__reduce__()
For pickling.
===
ndarray.__setstate__(version, shape, dtype, ...)
For unpickling.
===
ndarray.__array__(...)
Returns either a new reference to self if dtype is not given or a new array of provided data type if dtype is different from the current dtype of the array.
===
ndarray.__getitem__
x.__getitem__(y) <==> x[y]
===
ndarray.__setitem__
x.__setitem__(i, y) <==> x[i]=y
===
ndarray.__contains__
x.__contains__(y) <==> y in x
===
empty(shape[, dtype, order])
Return a new array of given shape and type, without initializing entries.
===
empty_like(a[, dtype, order, subok])
Return a new array with the same shape and type as a given array.
===
eye(N[, M, k, dtype])
Return a 2-D array with ones on the diagonal and zeros elsewhere.
===
identity(n[, dtype])
Return the identity array.
===
ones(shape[, dtype, order])
Return a new array of given shape and type, filled with ones.
===
ones_like(a[, dtype, order, subok])
Return an array of ones with the same shape and type as a given array.
===
zeros(shape[, dtype, order])
Return a new array of given shape and type, filled with zeros.
===
zeros_like(a[, dtype, order, subok])
Return an array of zeros with the same shape and type as a given array.
===
full(shape, fill_value[, dtype, order])
Return a new array of given shape and type, filled with fill_value.
===
full_like(a, fill_value[, dtype, order, subok])
Return a full array with the same shape and type as a given array.
===
array(object[, dtype, copy, order, subok, ndmin])
Create an array.
===
asarray(a[, dtype, order])
Convert the input to an array.
===
asanyarray(a[, dtype, order])
Convert the input to an ndarray, but pass ndarray subclasses through.
===
ascontiguousarray(a[, dtype])
Return a contiguous array in memory (C order).
===
asmatrix(data[, dtype])
Interpret the input as a matrix.
===
copy(a[, order])
Return an array copy of the given object.
===
frombuffer(buffer[, dtype, count, offset])
Interpret a buffer as a 1-dimensional array.
===
fromfile(file[, dtype, count, sep])
Construct an array from data in a text or binary file.
===
fromfunction(function, shape, **kwargs)
Construct an array by executing a function over each coordinate.
===
fromiter(iterable, dtype[, count])
Create a new 1-dimensional array from an iterable object.
===
fromstring(string[, dtype, count, sep])
A new 1-D array initialized from raw binary or text data in a string.
===
loadtxt(fname[, dtype, comments, delimiter, ...])
Load data from a text file.
===
core.records.array(obj[, dtype, shape, ...])
Construct a record array from a wide-variety of objects.
===
core.records.fromarrays(arrayList[, dtype, ...])
create a record array from a (flat) list of arrays
===
core.records.fromrecords(recList[, dtype, ...])
create a recarray from a list of records in text form
===
core.records.fromstring(datastring[, dtype, ...])
create a (read-only) record array from binary data contained in
===
core.records.fromfile(fd[, dtype, shape, ...])
Create an array from binary file data
===
core.defchararray.array(obj[, itemsize, ...])
Create a chararray.
===
core.defchararray.asarray(obj[, itemsize, ...])
Convert the input to a chararray, copying the data only if necessary.
===
arange([start,] stop[, step,][, dtype])
Return evenly spaced values within a given interval.
===
linspace(start, stop[, num, endpoint, ...])
Return evenly spaced numbers over a specified interval.
===
logspace(start, stop[, num, endpoint, base, ...])
Return numbers spaced evenly on a log scale.
===
geomspace(start, stop[, num, endpoint, dtype])
Return numbers spaced evenly on a log scale (a geometric progression).
===
meshgrid(*xi, **kwargs)
Return coordinate matrices from coordinate vectors.
===
mgrid
nd_grid instance which returns a dense multi-dimensional “meshgrid”.
===
ogrid
nd_grid instance which returns an open multi-dimensional “meshgrid”.
===
diag(v[, k])
Extract a diagonal or construct a diagonal array.
===
diagflat(v[, k])
Create a two-dimensional array with the flattened input as a diagonal.
===
tri(N[, M, k, dtype])
An array with ones at and below the given diagonal and zeros elsewhere.
===
tril(m[, k])
Lower triangle of an array.
===
triu(m[, k])
Upper triangle of an array.
===
vander(x[, N, increasing])
Generate a Vandermonde matrix.
===
mat(data[, dtype])
Interpret the input as a matrix.
===
bmat(obj[, ldict, gdict])
Build a matrix object from a string, nested sequence, or array.
===
copyto(dst, src[, casting, where])
Copies values from one array to another, broadcasting as necessary.
===
reshape(a, newshape[, order])
Gives a new shape to an array without changing its data.
===
ravel(a[, order])
Return a contiguous flattened array.
===
ndarray.flat
A 1-D iterator over the array.
===
ndarray.flatten([order])
Return a copy of the array collapsed into one dimension.
===
moveaxis(a, source, destination)
Move axes of an array to new positions.
===
rollaxis(a, axis[, start])
Roll the specified axis backwards, until it lies in a given position.
===
swapaxes(a, axis1, axis2)
Interchange two axes of an array.
===
ndarray.T
Same as self.transpose(), except that self is returned if self.ndim < 2.
===
transpose(a[, axes])
Permute the dimensions of an array.
===
atleast_1d(*arys)
Convert inputs to arrays with at least one dimension.
===
atleast_2d(*arys)
View inputs as arrays with at least two dimensions.
===
atleast_3d(*arys)
View inputs as arrays with at least three dimensions.
===
broadcast
Produce an object that mimics broadcasting.
===
broadcast_to(array, shape[, subok])
Broadcast an array to a new shape.
===
broadcast_arrays(*args, **kwargs)
Broadcast any number of arrays against each other.
===
expand_dims(a, axis)
Expand the shape of an array.
===
squeeze(a[, axis])
Remove single-dimensional entries from the shape of an array.
===
asarray(a[, dtype, order])
Convert the input to an array.
===
asanyarray(a[, dtype, order])
Convert the input to an ndarray, but pass ndarray subclasses through.
===
asmatrix(data[, dtype])
Interpret the input as a matrix.
===
asfarray(a[, dtype])
Return an array converted to a float type.
===
asfortranarray(a[, dtype])
Return an array laid out in Fortran order in memory.
===
ascontiguousarray(a[, dtype])
Return a contiguous array in memory (C order).
===
asarray_chkfinite(a[, dtype, order])
Convert the input to an array, checking for NaNs or Infs.
===
asscalar(a)
Convert an array of size 1 to its scalar equivalent.
===
require(a[, dtype, requirements])
Return an ndarray of the provided type that satisfies requirements.
===
concatenate((a1, a2, ...)[, axis])
Join a sequence of arrays along an existing axis.
===
stack(arrays[, axis])
Join a sequence of arrays along a new axis.
===
column_stack(tup)
Stack 1-D arrays as columns into a 2-D array.
===
dstack(tup)
Stack arrays in sequence depth wise (along third axis).
===
hstack(tup)
Stack arrays in sequence horizontally (column wise).
===
vstack(tup)
Stack arrays in sequence vertically (row wise).
===
split(ary, indices_or_sections[, axis])
Split an array into multiple sub-arrays.
===
array_split(ary, indices_or_sections[, axis])
Split an array into multiple sub-arrays.
===
dsplit(ary, indices_or_sections)
Split array into multiple sub-arrays along the 3rd axis (depth).
===
hsplit(ary, indices_or_sections)
Split an array into multiple sub-arrays horizontally (column-wise).
===
vsplit(ary, indices_or_sections)
Split an array into multiple sub-arrays vertically (row-wise).
===
tile(A, reps)
Construct an array by repeating A the number of times given by reps.
===
repeat(a, repeats[, axis])
Repeat elements of an array.
===
delete(arr, obj[, axis])
Return a new array with sub-arrays along an axis deleted.
===
insert(arr, obj, values[, axis])
Insert values along the given axis before the given indices.
===
append(arr, values[, axis])
Append values to the end of an array.
===
resize(a, new_shape)
Return a new array with the specified shape.
===
trim_zeros(filt[, trim])
Trim the leading and/or trailing zeros from a 1-D array or sequence.
===
unique(ar[, return_index, return_inverse, ...])
Find the unique elements of an array.
===
flip(m, axis)
Reverse the order of elements in an array along the given axis.
===
fliplr(m)
Flip array in the left/right direction.
===
flipud(m)
Flip array in the up/down direction.
===
reshape(a, newshape[, order])
Gives a new shape to an array without changing its data.
===
roll(a, shift[, axis])
Roll array elements along a given axis.
===
rot90(m[, k, axes])
Rotate an array by 90 degrees in the plane specified by axes.
===
bitwise_and(x1, x2[, out])
Compute the bit-wise AND of two arrays element-wise.
===
bitwise_or(x1, x2[, out])
Compute the bit-wise OR of two arrays element-wise.
===
bitwise_xor(x1, x2[, out])
Compute the bit-wise XOR of two arrays element-wise.
===
invert(x[, out])
Compute bit-wise inversion, or bit-wise NOT, element-wise.
===
left_shift(x1, x2[, out])
Shift the bits of an integer to the left.
===
right_shift(x1, x2[, out])
Shift the bits of an integer to the right.
===
packbits(myarray[, axis])
Packs the elements of a binary-valued array into bits in a uint8 array.
===
unpackbits(myarray[, axis])
Unpacks elements of a uint8 array into a binary-valued output array.
===
binary_repr(num[, width])
Return the binary representation of the input number as a string.
===
add(x1, x2)
Return element-wise string concatenation for two arrays of str or unicode.
===
multiply(a, i)
Return (a * i), that is string multiple concatenation, element-wise.
===
mod(a, values)
Return (a % i), that is pre-Python 2.6 string formatting (iterpolation), element-wise for a pair of array_likes of str or unicode.
===
capitalize(a)
Return a copy of a with only the first character of each element capitalized.
===
center(a, width[, fillchar])
Return a copy of a with its elements centered in a string of length width.
===
decode(a[, encoding, errors])
Calls str.decode element-wise.
===
encode(a[, encoding, errors])
Calls str.encode element-wise.
===
join(sep, seq)
Return a string which is the concatenation of the strings in the sequence seq.
===
ljust(a, width[, fillchar])
Return an array with the elements of a left-justified in a string of length width.
===
lower(a)
Return an array with the elements converted to lowercase.
===
lstrip(a[, chars])
For each element in a, return a copy with the leading characters removed.
===
partition(a, sep)
Partition each element in a around sep.
===
replace(a, old, new[, count])
For each element in a, return a copy of the string with all occurrences of substring old replaced by new.
===
rjust(a, width[, fillchar])
Return an array with the elements of a right-justified in a string of length width.
===
rpartition(a, sep)
Partition (split) each element around the right-most separator.
===
rsplit(a[, sep, maxsplit])
For each element in a, return a list of the words in the string, using sep as the delimiter string.
===
rstrip(a[, chars])
For each element in a, return a copy with the trailing characters removed.
===
split(a[, sep, maxsplit])
For each element in a, return a list of the words in the string, using sep as the delimiter string.
===
splitlines(a[, keepends])
For each element in a, return a list of the lines in the element, breaking at line boundaries.
===
strip(a[, chars])
For each element in a, return a copy with the leading and trailing characters removed.
===
swapcase(a)
Return element-wise a copy of the string with uppercase characters converted to lowercase and vice versa.
===
title(a)
Return element-wise title cased version of string or unicode.
===
translate(a, table[, deletechars])
For each element in a, return a copy of the string where all characters occurring in the optional argument deletechars are removed, and the remaining characters have been mapped through the given translation table.
===
upper(a)
Return an array with the elements converted to uppercase.
===
zfill(a, width)
Return the numeric string left-filled with zeros
===
equal(x1, x2)
Return (x1 == x2) element-wise.
===
not_equal(x1, x2)
Return (x1 != x2) element-wise.
===
greater_equal(x1, x2)
Return (x1 >= x2) element-wise.
===
less_equal(x1, x2)
Return (x1 <= x2) element-wise.
===
greater(x1, x2)
Return (x1 > x2) element-wise.
===
less(x1, x2)
Return (x1 < x2) element-wise.
===
count(a, sub[, start, end])
Returns an array with the number of non-overlapping occurrences of substring sub in the range [start, end].
===
find(a, sub[, start, end])
For each element, return the lowest index in the string where substring sub is found.
===
index(a, sub[, start, end])
Like find, but raises ValueError when the substring is not found.
===
isalpha(a)
Returns true for each element if all characters in the string are alphabetic and there is at least one character, false otherwise.
===
isdecimal(a)
For each element, return True if there are only decimal characters in the element.
===
isdigit(a)
Returns true for each element if all characters in the string are digits and there is at least one character, false otherwise.
===
islower(a)
Returns true for each element if all cased characters in the string are lowercase and there is at least one cased character, false otherwise.
===
isnumeric(a)
For each element, return True if there are only numeric characters in the element.
===
isspace(a)
Returns true for each element if there are only whitespace characters in the string and there is at least one character, false otherwise.
===
istitle(a)
Returns true for each element if the element is a titlecased string and there is at least one character, false otherwise.
===
isupper(a)
Returns true for each element if all cased characters in the string are uppercase and there is at least one character, false otherwise.
===
rfind(a, sub[, start, end])
For each element in a, return the highest index in the string where substring sub is found, such that sub is contained within [start, end].
===
rindex(a, sub[, start, end])
Like rfind, but raises ValueError when the substring sub is not found.
===
startswith(a, prefix[, start, end])
Returns a boolean array which is True where the string element in a starts with prefix, otherwise False.
===
chararray
Provides a convenient view on arrays of string and unicode values.
===
setbufsize(size)
Set the size of the buffer used in ufuncs.
===
seterr([all, divide, over, under, invalid])
Set how floating-point errors are handled.
===
seterrcall(func)
Set the floating-point error callback function or log object.
===
__doc__
A docstring for each ufunc. The first part of the docstring is
dynamically generated from the number of outputs, the name, and
the number of inputs. The second part of the docstring is
provided at creation time and stored with the ufunc.
===
__name__
The name of the ufunc.
===
ufunc.nin
The number of inputs.
===
ufunc.nout
The number of outputs.
===
ufunc.nargs
The number of arguments.
===
ufunc.ntypes
The number of types.
===
ufunc.types
Returns a list with types grouped input->output.
===
ufunc.identity
The identity value.
===
ufunc.reduce(a[, axis, dtype, out, keepdims])
Reduces a‘s dimension by one, by applying ufunc along one axis.
===
ufunc.accumulate(array[, axis, dtype, out, ...])
Accumulate the result of applying the operator to all elements.
===
ufunc.reduceat(a, indices[, axis, dtype, out])
Performs a (local) reduce with specified slices over a single axis.
===
ufunc.outer(A, B, **kwargs)
Apply the ufunc op to all pairs (a, b) with a in A and b in B.
===
ufunc.at(a, indices[, b])
Performs unbuffered in place operation on operand ‘a for elements specified by ‘indices.
===
add(x1, x2[, out])
Add arguments element-wise.
===
subtract(x1, x2[, out])
Subtract arguments, element-wise.
===
multiply(x1, x2[, out])
Multiply arguments element-wise.
===
divide(x1, x2[, out])
Divide arguments element-wise.
===
logaddexp(x1, x2[, out])
Logarithm of the sum of exponentiations of the inputs.
===
logaddexp2(x1, x2[, out])
Logarithm of the sum of exponentiations of the inputs in base-2.
===
true_divide(x1, x2[, out])
Returns a true division of the inputs, element-wise.
===
floor_divide(x1, x2[, out])
Return the largest integer smaller or equal to the division of the inputs.
===
negative(x[, out])
Numerical negative, element-wise.
===
power(x1, x2[, out])
First array elements raised to powers from second array, element-wise.
===
remainder(x1, x2[, out])
Return element-wise remainder of division.
===
mod(x1, x2[, out])
Return element-wise remainder of division.
===
fmod(x1, x2[, out])
Return the element-wise remainder of division.
===
absolute(x[, out])
Calculate the absolute value element-wise.
===
fabs(x[, out])
Compute the absolute values element-wise.
===
rint(x[, out])
Round elements of the array to the nearest integer.
===
sign(x[, out])
Returns an element-wise indication of the sign of a number.
===
conj(x[, out])
Return the complex conjugate, element-wise.
===
exp(x[, out])
Calculate the exponential of all elements in the input array.
===
exp2(x[, out])
Calculate 2**p for all p in the input array.
===
log(x[, out])
Natural logarithm, element-wise.
===
log2(x[, out])
Base-2 logarithm of x.
===
log10(x[, out])
Return the base 10 logarithm of the input array, element-wise.
===
expm1(x[, out])
Calculate exp(x) - 1 for all elements in the array.
===
log1p(x[, out])
Return the natural logarithm of one plus the input array, element-wise.
===
sqrt(x[, out])
Return the positive square-root of an array, element-wise.
===
square(x[, out])
Return the element-wise square of the input.
===
cbrt(x[, out])
Return the cube-root of an array, element-wise.
===
reciprocal(x[, out])
Return the reciprocal of the argument, element-wise.
===
sin(x[, out])
Trigonometric sine, element-wise.
===
cos(x[, out])
Cosine element-wise.
===
tan(x[, out])
Compute tangent element-wise.
===
arcsin(x[, out])
Inverse sine, element-wise.
===
arccos(x[, out])
Trigonometric inverse cosine, element-wise.
===
arctan(x[, out])
Trigonometric inverse tangent, element-wise.
===
arctan2(x1, x2[, out])
Element-wise arc tangent of x1/x2 choosing the quadrant correctly.
===
hypot(x1, x2[, out])
Given the “legs” of a right triangle, return its hypotenuse.
===
sinh(x[, out])
Hyperbolic sine, element-wise.
===
cosh(x[, out])
Hyperbolic cosine, element-wise.
===
tanh(x[, out])
Compute hyperbolic tangent element-wise.
===
arcsinh(x[, out])
Inverse hyperbolic sine element-wise.
===
arccosh(x[, out])
Inverse hyperbolic cosine, element-wise.
===
arctanh(x[, out])
Inverse hyperbolic tangent element-wise.
===
deg2rad(x[, out])
Convert angles from degrees to radians.
===
rad2deg(x[, out])
Convert angles from radians to degrees.
===
bitwise_and(x1, x2[, out])
Compute the bit-wise AND of two arrays element-wise.
===
bitwise_or(x1, x2[, out])
Compute the bit-wise OR of two arrays element-wise.
===
bitwise_xor(x1, x2[, out])
Compute the bit-wise XOR of two arrays element-wise.
===
invert(x[, out])
Compute bit-wise inversion, or bit-wise NOT, element-wise.
===
left_shift(x1, x2[, out])
Shift the bits of an integer to the left.
===
right_shift(x1, x2[, out])
Shift the bits of an integer to the right.
===
greater(x1, x2[, out])
Return the truth value of (x1 > x2) element-wise.
===
greater_equal(x1, x2[, out])
Return the truth value of (x1 >= x2) element-wise.
===
less(x1, x2[, out])
Return the truth value of (x1 < x2) element-wise.
===
less_equal(x1, x2[, out])
Return the truth value of (x1 =< x2) element-wise.
===
not_equal(x1, x2[, out])
Return (x1 != x2) element-wise.
===
equal(x1, x2[, out])
Return (x1 == x2) element-wise.
===
logical_and(x1, x2[, out])
Compute the truth value of x1 AND x2 element-wise.
===
logical_or(x1, x2[, out])
Compute the truth value of x1 OR x2 element-wise.
===
logical_xor(x1, x2[, out])
Compute the truth value of x1 XOR x2, element-wise.
===
logical_not(x[, out])
Compute the truth value of NOT x element-wise.
===
maximum(x1, x2[, out])
Element-wise maximum of array elements.
===
minimum(x1, x2[, out])
Element-wise minimum of array elements.
===
fmax(x1, x2[, out])
Element-wise maximum of array elements.
===
fmin(x1, x2[, out])
Element-wise minimum of array elements.
===
isfinite(x[, out])
Test element-wise for finiteness (not infinity or not Not a Number).
===
isinf(x[, out])
Test element-wise for positive or negative infinity.
===
isnan(x[, out])
Test element-wise for NaN and return result as a boolean array.
===
fabs(x[, out])
Compute the absolute values element-wise.
===
signbit(x[, out])
Returns element-wise True where signbit is set (less than zero).
===
copysign(x1, x2[, out])
Change the sign of x1 to that of x2, element-wise.
===
nextafter(x1, x2[, out])
Return the next floating-point value after x1 towards x2, element-wise.
===
spacing(x[, out])
Return the distance between x and the nearest adjacent number.
===
modf(x[, out1, out2])
Return the fractional and integral parts of an array, element-wise.
===
ldexp(x1, x2[, out])
Returns x1 * 2**x2, element-wise.
===
frexp(x[, out1, out2])
Decompose the elements of x into mantissa and twos exponent.
===
fmod(x1, x2[, out])
Return the element-wise remainder of division.
===
floor(x[, out])
Return the floor of the input, element-wise.
===
ceil(x[, out])
Return the ceiling of the input, element-wise.
===
trunc(x[, out])
Return the truncated value of the input, element-wise.
