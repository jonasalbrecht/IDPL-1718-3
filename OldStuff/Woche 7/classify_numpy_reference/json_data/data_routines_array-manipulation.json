[
    {
        "code": "copyto(dst, src[, casting, where])",
        "text": "Copies values from one array to another, broadcasting as necessary."
    },
    {
        "code": "reshape(a, newshape[, order])",
        "text": "Gives a new shape to an array without changing its data."
    },
    {
        "code": "ravel(a[, order])",
        "text": "Return a contiguous flattened array."
    },
    {
        "code": "ndarray.flat",
        "text": "A 1-D iterator over the array."
    },
    {
        "code": "ndarray.flatten([order])",
        "text": "Return a copy of the array collapsed into one dimension."
    },
    {
        "code": "moveaxis(a, source, destination)",
        "text": "Move axes of an array to new positions."
    },
    {
        "code": "rollaxis(a, axis[, start])",
        "text": "Roll the specified axis backwards, until it lies in a given position."
    },
    {
        "code": "swapaxes(a, axis1, axis2)",
        "text": "Interchange two axes of an array."
    },
    {
        "code": "ndarray.T",
        "text": "Same as self.transpose(), except that self is returned if self.ndim < 2."
    },
    {
        "code": "transpose(a[, axes])",
        "text": "Permute the dimensions of an array."
    },
    {
        "code": "atleast_1d(*arys)",
        "text": "Convert inputs to arrays with at least one dimension."
    },
    {
        "code": "atleast_2d(*arys)",
        "text": "View inputs as arrays with at least two dimensions."
    },
    {
        "code": "atleast_3d(*arys)",
        "text": "View inputs as arrays with at least three dimensions."
    },
    {
        "code": "broadcast",
        "text": "Produce an object that mimics broadcasting."
    },
    {
        "code": "broadcast_to(array, shape[, subok])",
        "text": "Broadcast an array to a new shape."
    },
    {
        "code": "broadcast_arrays(*args, **kwargs)",
        "text": "Broadcast any number of arrays against each other."
    },
    {
        "code": "expand_dims(a, axis)",
        "text": "Expand the shape of an array."
    },
    {
        "code": "squeeze(a[, axis])",
        "text": "Remove single-dimensional entries from the shape of an array."
    },
    {
        "code": "asarray(a[, dtype, order])",
        "text": "Convert the input to an array."
    },
    {
        "code": "asanyarray(a[, dtype, order])",
        "text": "Convert the input to an ndarray, but pass ndarray subclasses through."
    },
    {
        "code": "asmatrix(data[, dtype])",
        "text": "Interpret the input as a matrix."
    },
    {
        "code": "asfarray(a[, dtype])",
        "text": "Return an array converted to a float type."
    },
    {
        "code": "asfortranarray(a[, dtype])",
        "text": "Return an array laid out in Fortran order in memory."
    },
    {
        "code": "ascontiguousarray(a[, dtype])",
        "text": "Return a contiguous array in memory (C order)."
    },
    {
        "code": "asarray_chkfinite(a[, dtype, order])",
        "text": "Convert the input to an array, checking for NaNs or Infs."
    },
    {
        "code": "asscalar(a)",
        "text": "Convert an array of size 1 to its scalar equivalent."
    },
    {
        "code": "require(a[, dtype, requirements])",
        "text": "Return an ndarray of the provided type that satisfies requirements."
    },
    {
        "code": "concatenate((a1, a2, ...)[, axis])",
        "text": "Join a sequence of arrays along an existing axis."
    },
    {
        "code": "stack(arrays[, axis])",
        "text": "Join a sequence of arrays along a new axis."
    },
    {
        "code": "column_stack(tup)",
        "text": "Stack 1-D arrays as columns into a 2-D array."
    },
    {
        "code": "dstack(tup)",
        "text": "Stack arrays in sequence depth wise (along third axis)."
    },
    {
        "code": "hstack(tup)",
        "text": "Stack arrays in sequence horizontally (column wise)."
    },
    {
        "code": "vstack(tup)",
        "text": "Stack arrays in sequence vertically (row wise)."
    },
    {
        "code": "split(ary, indices_or_sections[, axis])",
        "text": "Split an array into multiple sub-arrays."
    },
    {
        "code": "array_split(ary, indices_or_sections[, axis])",
        "text": "Split an array into multiple sub-arrays."
    },
    {
        "code": "dsplit(ary, indices_or_sections)",
        "text": "Split array into multiple sub-arrays along the 3rd axis (depth)."
    },
    {
        "code": "hsplit(ary, indices_or_sections)",
        "text": "Split an array into multiple sub-arrays horizontally (column-wise)."
    },
    {
        "code": "vsplit(ary, indices_or_sections)",
        "text": "Split an array into multiple sub-arrays vertically (row-wise)."
    },
    {
        "code": "tile(A, reps)",
        "text": "Construct an array by repeating A the number of times given by reps."
    },
    {
        "code": "repeat(a, repeats[, axis])",
        "text": "Repeat elements of an array."
    },
    {
        "code": "delete(arr, obj[, axis])",
        "text": "Return a new array with sub-arrays along an axis deleted."
    },
    {
        "code": "insert(arr, obj, values[, axis])",
        "text": "Insert values along the given axis before the given indices."
    },
    {
        "code": "append(arr, values[, axis])",
        "text": "Append values to the end of an array."
    },
    {
        "code": "resize(a, new_shape)",
        "text": "Return a new array with the specified shape."
    },
    {
        "code": "trim_zeros(filt[, trim])",
        "text": "Trim the leading and/or trailing zeros from a 1-D array or sequence."
    },
    {
        "code": "unique(ar[, return_index, return_inverse, ...])",
        "text": "Find the unique elements of an array."
    },
    {
        "code": "flip(m, axis)",
        "text": "Reverse the order of elements in an array along the given axis."
    },
    {
        "code": "fliplr(m)",
        "text": "Flip array in the left/right direction."
    },
    {
        "code": "flipud(m)",
        "text": "Flip array in the up/down direction."
    },
    {
        "code": "reshape(a, newshape[, order])",
        "text": "Gives a new shape to an array without changing its data."
    },
    {
        "code": "roll(a, shift[, axis])",
        "text": "Roll array elements along a given axis."
    },
    {
        "code": "rot90(m[, k, axes])",
        "text": "Rotate an array by 90 degrees in the plane specified by axes."
    }
]