[
    {
        "code": "matrix.T",
        "text": "Returns the transpose of the matrix."
    },
    {
        "code": "matrix.H",
        "text": "Returns the (complex) conjugate transpose of self."
    },
    {
        "code": "matrix.I",
        "text": "Returns the (multiplicative) inverse of invertible self."
    },
    {
        "code": "matrix.A",
        "text": "Return self as an ndarray object."
    },
    {
        "code": "matrix",
        "text": "Returns a matrix from an array-like object, or from a string of data."
    },
    {
        "code": "asmatrix(data[, dtype])",
        "text": "Interpret the input as a matrix."
    },
    {
        "code": "bmat(obj[, ldict, gdict])",
        "text": "Build a matrix object from a string, nested sequence, or array."
    },
    {
        "code": "memmap",
        "text": "Create a memory-map to an array stored in a binary file on disk."
    },
    {
        "code": "memmap.flush()",
        "text": "Write any changes in the array to the file on disk."
    },
    {
        "code": "chararray",
        "text": "Provides a convenient view on arrays of string and unicode values."
    },
    {
        "code": "core.defchararray.array(obj[, itemsize, ...])",
        "text": "Create a chararray."
    },
    {
        "code": "recarray",
        "text": "Construct an ndarray that allows field access using attributes."
    },
    {
        "code": "record",
        "text": "A data-type scalar that allows field access as attribute lookup."
    },
    {
        "code": "numpy.lib.user_array.container(data[, ...])",
        "text": "Standard container-class for easy multiple-inheritance."
    },
    {
        "code": "ndarray.flat",
        "text": "A 1-D iterator over the array."
    },
    {
        "code": "ndenumerate(arr)",
        "text": "Multidimensional index iterator."
    },
    {
        "code": "broadcast",
        "text": "Produce an object that mimics broadcasting."
    }
]